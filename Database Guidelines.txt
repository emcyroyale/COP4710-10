Database Sketch
==============================================================================
GENERAL
==============================================================================

User
	-Register
		+Userid
		+Password
		+Type
			-If student - University
		
	-Login
		+Checks if login info is correct
		
	-Can view
		+Based on type of user scope
		+
		
Super Admin
	-Create University
		+Inserts into University entity and consolidates created_by_U relationship
	-Approve non-RSO events
	
Student
	-With 5 other student can create an RSO
		+Check if all conditions are met and creates
			-New admin
			-New RSO
			-New members of RSO
	-Comment
		-Specified Event and text
		-Timestamp, userid, event name primary key
			+multiple comments on same event
		-Edit comments
			+retrieve comments based on specified event and then allow specific changes
	-Rate an event	
		
Admin
	-Has to be affiliated with one University
	-Can own an RSO
		+Should be consolidated during creation of RSO gui
	-Can create events
	-Approve RSO event	
	
Events
	-Can be seen based on event type
		+private - university(of creator admin)
		+public - everyone
		+RSO - members
		
RSO
	-Has members and owner
	
==============================================================================
GUI IMPLEMENTATION
==============================================================================

-Home
	+Registration
	+Login
		
-Dependent on Scope
	=ALL
	+View Events
	
	=Super Admin
	+Create University
	+Add Locations
	
	=Admin
	+Create Event
	
	=Student
	+Create RSO
	+Join RSO
	+Comment
	+Rate
	
======================================================
DB Tables 
======================================================

CREATE TABLE User (
	userid		CHAR(20),
	password	CHAR(20),
	access_type	CHAR(20),
	email		CHAR(50),
	PRIMARY KEY	(userid))

CREATE TABLE Student (
	student_id	CHAR(20),
	userid		CHAR(20) NOT NULL,
	email		CHAR(50), 
	uni_name	CHAR(50) NOT NULL,
	PRIMARY KEY	(student_id),
	FOREIGN KEY (userid, email) REFERENCES User
		ON DELETE CASCASDE)
	FOREIGN KEY (uni_name) REFERENCES University
		ON DELETE CASCADE)

CREATE TABLE Admin (
	admin_id	CHAR(20),
	userid 		CHAR(20) NOT NULL,
	email		CHAR(50),
	uni_name	CHAR(50) NOT NULL,
	PRIMARY KEY (admin_id)
	FOREIGN KEY (userid, email) REFERENCES User
		ON DELETE CASCADE)
	FOREIGN KEY (uni_name) REFERENCES University
		ON DELETE CASCADE)

CREATE TABLE SuperAdmin (
	superAdmin_id	CHAR(20),
	userid			CHAR(20) NOT NULL,
	email			CHAR(50),
	PRIMARY KEY (superAdmin_id)
	FOREIGN KEY (userid, email) REFERENCES User
		ON DELETE CASCADE)

CREATE TABLE University (
	uni_name		CHAR(20),
	location 		CHAR(20),
	description		VARCHAR(150),
	no_students		INTEGER,
	superAdmin_id	CHAR(20) NOT NULL,
	PRIMARY KEY (uni_name)
	FOREIGN KEY (superAdmin_id) REFERENCES SuperAdmin
)

CREATE TABLE RSO (
	rso_name	CHAR(30),
	admin_id 	CHAR(20) NOT NULL,
	PRIMARY KEY (rso_name)
	FORIEGN KEY (admin_id) REFERENCES Admin
		ON DELETE CASCADE
)


CREATE TABLE Events (
	time 		TIME, //Or INTEGER; Hourly basis? (suggested in handout)
	date 		DATE,
	loc_name	CHAR(20) NOT NULL,
	event_type	CHAR(20),
	description	CHAR(150),
	phone_no	INTEGER, 
	email		CHAR(50),
	admin_id 	CHAR(20) NOT NULL,
	PRIMARY KEY (time, loc_name)
	FORIGN KEY (loc_name) REFERENCES Location
	FORIENG KEY (email, admin_id) REFERENCES Admin
)

CREATE TABLE Location (
	loc_name	CHAR(20),
	longitude	CHAR(50),
	latitude	CHAR(50),
	PRIMARY KEY (loc_name)
)


======================================================
SeeEvents SQL Statement
======================================================

SELECT SQL STATEMENT TO SeeEvents

// Current session user's id and university name
$user_id = $_SESSION['userid'];
$user_university = $_SESSION['uni_name'];

$query = "
	#Private Events
	SELECT *
	FROM Events E
	WHERE E.type = 'Private'
		AND E.created_by_E IN 	(SELECT A.userid
								FROM Admins A
								WHERE A.uni_name = '$user_university')
	UNION

	#Public Events
	SELECT *
	FROM Events E
	WHERE E.type = 'Public'

	UNION

	#RSO Events
	SELECT *
	FROM Events E
	WHERE E.type = 'RSO'
		AND EXISTS (SELECT *
					FROM Member M, RSO R
					WHERE $user_id = M.userid
						AND M.rname = R.rname 
						AND R.uid = E.created_by_E)
";
